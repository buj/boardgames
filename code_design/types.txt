Because of the decision to make the engine unfailable, everything must
be able to interact with everything without crashing. It does not have
to be a meaningful interaction. For example, there is no reasonable
answer to the question: "What is (bool)true + (set(int)){1, 3, 7}?"

(The engine is made unfailable to provide greater freedom to the
programmer, and due to the absence of classes. Instead, there are
generic objects that are much more dynamic than class instances from
standard programming languages.)

On the other hand, API-wise, it would be unreasonable to have each
function deal with some super-superclass of all things. For example,
when implementing addition, we want to only implement it for two
integers. We do not want to assume that we get 2 arbitrary things,
then cast them to integers, then do the addition.

So we can divide the methods, objects, and everything inside the engine
into 2 parts:
- The part that actually does the job and knows the types of
  the objects.
- The part that casts objects to the desired type. If it fails, it
  returns an appropriate neutral value, or stops execution.
